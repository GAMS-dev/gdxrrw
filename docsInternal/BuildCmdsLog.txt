Here we have some helpful commands useful for building/testing the
gdxrrw package.

N.B.: assume $rrw is the dir containing the package tree.  This is
also the top level of the git repo, or the directory containing the
README.md file.


=================== Linux (Fedora release 32) =========================
To INSTALL or build or test, it works well to NOT have library(gdxrrw)
set in .Rprofile but to have
R_GAMS_SYSDIR=/path/to/GAMS/sysdir

cd $rrw

R CMD INSTALL gdxrrw
R CMD REMOVE gdxrrw  {to remove, or undo an install}

# to make a binary distribution, do:
R CMD INSTALL gdxrrw --build

# to make a source distribution gdxrrw_X.Y.Z.tar.gz, do:
R CMD build gdxrrw

# and it is good practice to check this source distro:
R CMD check gdxrrw_X.Y.Z.tar.gz

=========== Windows (xps15, Steve's 64-bit Windows 10 Dell laptop) ===========
# do these from a normal command prompt, not one started from the
# Visual Studio menu.

R                CMD INSTALL gdxrrw
R --no-init-file CMD INSTALL gdxrrw

R CMD REMOVE  gdxrrw    {to remove, or undo an install}
R CMD INSTALL gdxrrw --build  {binary package gdxrrw_X.Y.Z.zip for distribution}
R CMD build gdxrrw            {source package gdxrrw_X.Y.Z.tar.gz for distribution}


================ Mac OSX (pete, Mohave) ================
Since R 3.0.0 the binary is a single-arch build
and contains only the x86_64 (64-bit Intel) architecture.  We can use
single-arch compilers.

R CMD INSTALL gdxrrw
R CMD INSTALL gdxrrw --build
R CMD build gdxrrw && R CMD check gdxrrw_X.Y.Z.tar.gz ; echo "check rc = $?"


================ Misc ================
> .First <- function() { library(gdxrrw) ; igdx("/home/steve/leg_alpha/gmstest")}
> library(gdxrrw)  but this can go in .First as above

To debug a script, try one of these:
R -d valgrind --vanilla < foo.R
R -d "valgrind --tool=memcheck --leak-check=full" --vanilla < foo.R
