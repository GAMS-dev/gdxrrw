Some helpful commands:
assume $rrw is the dir containing the package tree, i.e. the gdxrrw
directory, or https://svn.gams.com/source/share/gdxrrw in our case.


=================== Linux (ike, 64-bit Redhat) ==============================
Typically we start with
  gg2 alpha ; gup ; gll  (to put a GAMS sysdir in the PATH)
OR
you can have one set via an R .First function
cd $rrw

R CMD INSTALL gdxrrw
R CMD REMOVE gdxrrw  {to remove, or undo an install}
R CMD check gdxrrw

# to make a binary distribution, do:
R CMD INSTALL gdxrrw --build

# to build and check locally
R CMD check gdxrrw ; echo "check rc = $?"

# this command creates a source distribution: gdxrrw_X.Y.Z.tar.gz
R CMD build gdxrrw

=========== Windows (xps15, Steve's 64-bit Windows 10 Dell laptop) ===========
# do these from a normal command prompt, not one started from the
# Visual Studio menu.

R                CMD INSTALL gdxrrw
R --no-init-file CMD INSTALL gdxrrw

R CMD REMOVE  gdxrrw    {to remove, or undo an install}
R CMD INSTALL gdxrrw --build  {binary package gdxrrw_X.Y.Z.zip for distribution}
R CMD build gdxrrw            {source package gdxrrw_X.Y.Z.tar.gz for distribution}


================ Mac OSX (what Mac machine will we use?) ================
On OSX multi-arch binaries are built.  This requires the default
compilers in /usr/bin, not the stuff in /usr/local/bin.  Be aware.
Update: since R 3.0.0 the binary is a single-arch build
and contains only the x86_64 (64-bit Intel) architecture.  We can use
single-arch compilers.

R CMD INSTALL gdxrrw
R CMD INSTALL gdxrrw --build
R CMD build gdxrrw && R CMD check gdxrrw_X.Y.Z.tar.gz ; echo "check rc = $?"


================ Misc ================
> .First <- function() { library(gdxrrw) ; igdx("/home/steve/leg_alpha/gmstest")}
> library(gdxrrw)  but this can go in .First as above

To debug a script, try one of these:
R -d valgrind --vanilla < foo.R
R -d "valgrind --tool=memcheck --leak-check=full" --vanilla < foo.R
