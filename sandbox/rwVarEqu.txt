Created: 24 May, 2012, Steve Dirkse

Some notes on augmenting gdxrrw so we can read & write variables and
equations.  By this, we mean read the entire body of data for a
var/equ, not just one field, and write a proper variable or equation.

Lets look at the case of reading first.  Obviously, we want this to be
as invertible as possible, so we want to data we get from rgdx to be
the same as the data we pass in to wgdx.  Assume we do:

  lst <- list(name='x',form='sparse')
  d <- rgdx('var.gdx', lst)

1. d$type will be "variable", but we need to know what kind of
variable.  We can change d$type to "positive variable". Or we can add
a new output d$subtype and make that "positive variable", and maybe
also a new output d$typeCode containing an integer code in
[0..nVarTypes).  I prefer the second solution.

2. The current default for rgdx on reading a variable is to behave as
if lst$field == "l" if lst$field is not set.  If we can read a whole
variable, it would be convenient to return the whole variable if
lst$field is not set, and require lst$field == "l" if you really want
just the level.  This breaks backward compatibility but if we don't do
this we need another way to specify we want the entire variable or
equation.

3. If we return just one field of a variable in sparse form, we use
the same form for d$val as we do for a parameter: one row for each
nonzero, and each row of d$val looks like
[rowNum,]    i1     i2  ....  iN    x
where the N integers map to the UELS and x is the actual data.
When returning all fields of a variable, we can add one more index
position to indicate the field.  So we might have
[rowNum,]    i1     i2  ....  iN   1   1.0       <- level
[rowNum,]    i1     i2  ....  iN   2   0.0       <- marginal
[rowNum,]    i1     i2  ....  iN   3   -inf      <- lo
[rowNum,]    i1     i2  ....  iN   4   inf       <- up
[rowNum,]    i1     i2  ....  iN   5   1.0       <- scale


4. For the case of dense output, i.e.

flst <- list(name='x',form='full')
   d <- rgdx('var.gdx', flst)

we can just add an additional index position, dimension N+1.  The
indices in this dimension will be 1..5 for variables, with strings
"l", "m", "lo", "up", "scale".  We can probably put these on as the
dimnames for this N+1'st index position also.


---------------------------------------------------------------------

Outstanding issues and questions:

None so far.


